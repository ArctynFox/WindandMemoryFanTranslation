#==============================================================================
# □ 装備スロット拡張 (for VX Ace)
#------------------------------------------------------------------------------
# Version : 1_20120421
# by サリサ・タイクーン
# http://www.tycoon812.com/rgss/
#==============================================================================

#==============================================================================
# □ 素材スイッチ
#==============================================================================
$rgsslab = {} if $rgsslab == nil
$rgsslab["装備スロット拡張"] = true

if $rgsslab["装備スロット拡張"]

#==============================================================================
# □ カスタマイズポイント
#==============================================================================
module RGSSLAB end
module RGSSLAB::Equipment_Slots_Extension
  #--------------------------------------------------------------------------
  # ○ 新しく追加する装備部位名
  #    新しい部位の設定を行います。
  #--------------------------------------------------------------------------
  APPEND_ARMOR_PART = []
  #--------------------------------------------------------------------------
  # ○ 装備部位の文字列設定
  #    防具のメモ欄において、記述する文字列を指定します。
  #
  #    メモ欄に、[ + ARMOR_PART_NOTEの値 + 部位番号 +] と記述して
  #    装備部位を変更します。
  #    （部位以外の設定は、そのまま引き継がれます）
  #
  #    例：
  #    ARMOR_PART_NOTEの値が"部位番号："で、部位番号が5の場合
  #    [部位番号：5] と記述します。
  #--------------------------------------------------------------------------
  ARMOR_PART_NOTE = "部位番号："
  #--------------------------------------------------------------------------
  # ○ モードの指定
  #    "アクター"か"職業"のどちらかを記述します。
  #    （それ以外は、全て"アクター"と同じ扱いとなります）
  #
  #    EQUIP_SLOTS_ARRAYの設定において、影響を受けます。
  #
  #    ゲーム中に途中で切り替える機能はありませんので
  #    ご注意下さい。
  #--------------------------------------------------------------------------
  MODE = "アクター"
  #--------------------------------------------------------------------------
  # ○ 装備スロットの配列設定
  #    アクター（職業）毎にスロットを指定します。
  #    （MODEの値によって、異なります）
  #
  #    ・記述方法
  #     アクターID（職業のID） => [２番目のスロット, …],
  #    （最後の設定のみ、後ろのカンマを省略する事ができます）
  #
  #    この設定で、武器のスロット（0の事）を指定してしまうと
  #    不具合が生じますので、絶対に0を指定しないで下さい。
  #
  #    又、二刀流が有効の場合は
  #    0番目の配列が武器へ自動的に切り替わります。
  #    （色んな都合上、あえてそういう風にしてあります）
  #
  #    どのように設定しても、武器は必ず１番目になります。
  #    （二刀流の武器は強制的に２番目になります）
  #
  #    尚、スロットの標準は[1, 2, 3, 4],となっていますが
  #    スロット番号は重複させる事が可能です。
  #
  #    スロット配列の最初の添字だけは特殊ですので、できる限り
  #    最初の添字は、盾（スロット番号：1）にした方が良いです。
  #    （両手持ちや二刀流等の影響をそのまま受ける為）
  #
  #    ・スロット番号について
  #    1     : 盾
  #    2     : 頭
  #    3     : 身体
  #    4     : 装飾品
  #    5以降 : この素材で定義した部位番号に対応
  #
  #    上記以外のスロット番号は指定しないで下さい。
  #--------------------------------------------------------------------------
  EQUIP_SLOTS_ARRAY = {
   1 => [ 1, 2, 3, 4, 4, 4, 4],  
   2 => [ 1, 2, 3, 4, 4, 4, 4],  
   3 => [ 1, 2, 3, 4, 4, 4, 4],  
   4 => [ 1, 2, 3, 4, 4, 4, 4],  
   5 => [ 1, 2, 3, 4, 4, 4, 4],  
   6 => [ 1, 2, 3, 4, 4, 4, 4],  
   7 => [ 1, 2, 3, 4, 4, 4, 4], 
   8 => [ 1, 2, 3, 4, 4, 4, 4], 
   9 => [ 1, 2, 3, 4, 4, 4, 4], 
   10 => [ 1, 2, 3, 4, 4, 4, 4], 
   11 => [ 1, 2, 3, 4, 4, 4, 4], 
   
  }
  #--------------------------------------------------------------------------
  # ○ 初期装備の設定
  #    EQUIP_SLOTS_ARRAYの関係上、データベースでの設定とは
  #    合致しない場合もある上に、追加した部分まで反映はされません。
  #
  #    そこで、この素材による設定で初期装備を行いたいアクターのみ
  #    INITIALIZE_EQUIPに設定する事で、解決させます。
  #    （記述されていないアクターは、データベースの初期装備が行われます）
  #
  #    ・記述方法
  #     アクターID => [値, …],
  #    （最後の設定のみ、後ろのカンマを省略する事ができます）
  #
  #    値は、防具のIDを記述しますが、装備部位と合致させる必要がありますので
  #    必ずご確認下さい。
  #
  #    二刀流の場合は、最初の添字のみ二刀流の武器へ自動的に切り替わります。
  #    （どんな値であっても、最初の添字だけ無視されます）
  #--------------------------------------------------------------------------
  INITIALIZE_EQUIP = {

  }
end

# カスタマイズポイントは、ここまで

#==============================================================================
# □ RGSSLAB::Equipment_Slots_Extension [module]
#==============================================================================
module RGSSLAB::Equipment_Slots_Extension
  #--------------------------------------------------------------------------
  # ○ 素材設定用の定数定義
  #--------------------------------------------------------------------------
  MATERIAL_NAME = "装備スロット拡張"
  VERSION       = 1
  RELEASE       = 20120421
end

#==============================================================================
# ■ DataManager [module]
#==============================================================================
module DataManager
  #--------------------------------------------------------------------------
  # ○ モジュールの設定
  #--------------------------------------------------------------------------
  RGSSLAB_039 = RGSSLAB::Equipment_Slots_Extension
  #--------------------------------------------------------------------------
  # ● データベースのロード [再定義]
  #--------------------------------------------------------------------------
  def self.load_database
    if $BTEST
      load_battle_test_database
    else
      load_normal_database
      check_player_location
    end
    self.armor_setting
  end
  #--------------------------------------------------------------------------
  # ○ 装備部位の変更
  #--------------------------------------------------------------------------
  def self.armor_setting
    for i in 1...$data_armors.size
      if $data_armors[i].note[/\[#{RGSSLAB_039::ARMOR_PART_NOTE}(\d+)\]/]
        $data_armors[i].etype_id = $data_armors[i].note[/\[#{RGSSLAB_039::ARMOR_PART_NOTE}(\d+)\]/].scan(/[0-9]+/)[0][0].to_i
      end
    end
  end
end

#==============================================================================
# ■ Game_Actor [class]
#==============================================================================
class Game_Actor < Game_Battler
  #--------------------------------------------------------------------------
  # ○ モジュールの設定
  #--------------------------------------------------------------------------
  RGSSLAB_039 = RGSSLAB::Equipment_Slots_Extension
  #--------------------------------------------------------------------------
  # ● 装備品の初期化 [再定義]
  #     equips : 初期装備の配列
  #--------------------------------------------------------------------------
  def init_equips(equips)
    if RGSSLAB_039::INITIALIZE_EQUIP[@actor_id] != nil
      equips = []
      equips[0] = actor.equips[0]
      equips += RGSSLAB_039::INITIALIZE_EQUIP[@actor_id].dup
      equips[1] = actor.equips[1] if dual_wield?
    end
    @equips = Array.new(equip_slots.size) { Game_BaseItem.new }
    equips.each_with_index do |item_id, i|
      etype_id = index_to_etype_id(i)
      slot_id = empty_slot(etype_id)
      @equips[slot_id].set_equip(etype_id == 0, item_id) if slot_id
    end
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 装備スロットの配列を取得 [再定義]
  #--------------------------------------------------------------------------
  def equip_slots
    use_type = RGSSLAB_039::MODE == "職業" ? @class_id : @actor_id
    if RGSSLAB_039::EQUIP_SLOTS_ARRAY[use_type] == nil
      return [0,0,2,3,4] if dual_wield?
      return [0,1,2,3,4]
    end
    slots_array = [0]
    slots_array += RGSSLAB_039::EQUIP_SLOTS_ARRAY[use_type].dup
    slots_array[1] = 0 if dual_wield?
    return slots_array
  end
end

#==============================================================================
# ■ Window_EquipSlot [class]
#==============================================================================
class Window_EquipSlot < Window_Selectable
  #--------------------------------------------------------------------------
  # ○ モジュールの設定
  #--------------------------------------------------------------------------
  RGSSLAB_039 = RGSSLAB::Equipment_Slots_Extension
  #--------------------------------------------------------------------------
  # ○ ウィンドウ内容の作成 [オーバーライド]
  #--------------------------------------------------------------------------
  def create_contents
    contents.dispose
    if contents_width > 0 && contents_height > 0
      self.contents = Bitmap.new(contents_width, standard_padding * 2 * get_contents_height)
    else
      self.contents = Bitmap.new(1, 1)
    end
    contents.font.name = $game_system.rgsslab144.window if $rgsslab["フォントセッティング"]
  end
  #--------------------------------------------------------------------------
  # ○ 高さの取得
  #--------------------------------------------------------------------------
  def get_contents_height
    return 5 if @actor == nil
    use_type = RGSSLAB_039::MODE == "職業" ? @actor.class_id : @actor.id
    return 5 if RGSSLAB_039::EQUIP_SLOTS_ARRAY[use_type] == nil
    return RGSSLAB_039::EQUIP_SLOTS_ARRAY[use_type].size + 1
  end
  #--------------------------------------------------------------------------
  # ● 装備スロットの名前を取得 [再定義]
  #     index : 装備部位番号
  #--------------------------------------------------------------------------
  def slot_name(index)
    array = []
    for i in 0..4
      array.push($data_system.terms.etypes[i])
    end
    for i in 0...RGSSLAB_039::APPEND_ARMOR_PART.size
      array.push(RGSSLAB_039::APPEND_ARMOR_PART[i])
    end
    return @actor ? array[@actor.equip_slots[index]] : ""
  end
end

#==============================================================================
# ■ Scene_Equip [class]
#==============================================================================
class Scene_Equip < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● スロットウィンドウの作成 [再定義]
  #--------------------------------------------------------------------------
  def create_slot_window
    wx = @status_window.width
    wy = @command_window.y + @command_window.height
    ww = Graphics.width - @status_window.width
    @slot_window = Window_EquipSlot.new(wx, wy, ww)
    @slot_window.viewport = @viewport
    @slot_window.help_window = @help_window
    @slot_window.status_window = @status_window
    @slot_window.actor = @actor
    @slot_window.create_contents
    @slot_window.refresh
    @slot_window.set_handler(:ok,       method(:on_slot_ok))
    @slot_window.set_handler(:cancel,   method(:on_slot_cancel))
  end
  #--------------------------------------------------------------------------
  # ● アクターの切り替え [再定義]
  #--------------------------------------------------------------------------
  def on_actor_change
    @status_window.actor = @actor
    @slot_window.actor = @actor
    @slot_window.create_contents
    @slot_window.refresh
    @item_window.actor = @actor
    @command_window.activate
  end
end

end
